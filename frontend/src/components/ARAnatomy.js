import React, { useEffect, useState, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import './ARAnatomy.css';

const ARAnatomy = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isMarkerVisible, setIsMarkerVisible] = useState(false);
  const [cameraPermission, setCameraPermission] = useState(null);
  const [showInstructions, setShowInstructions] = useState(true);
  const [arStarted, setArStarted] = useState(false);
  const sceneRef = useRef(null);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∞–º–µ—Ä—ã
    const checkCameraSupport = async () => {
      try {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
          throw new Error('–ö–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä—É
        const stream = await navigator.mediaDevices.getUserMedia({ 
          video: { 
            facingMode: 'environment' // –ó–∞–¥–Ω—è—è –∫–∞–º–µ—Ä–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
          } 
        });
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫, —Ç–∞–∫ –∫–∞–∫ A-Frame —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–º–µ—Ä–æ–π
        stream.getTracks().forEach(track => track.stop());
        
        setCameraPermission(true);
        setIsLoading(false);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', err);
        setError(`–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ: ${err.message}`);
        setCameraPermission(false);
        setIsLoading(false);
      }
    };

    checkCameraSupport();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è A-Frame –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    const initAFrame = () => {
      if (typeof AFRAME !== 'undefined' && sceneRef.current) {
        console.log('A-Frame –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞
        const marker = sceneRef.current.querySelector('a-marker');
        if (marker) {
          marker.addEventListener('markerFound', () => {
            console.log('–ú–∞—Ä–∫–µ—Ä –Ω–∞–π–¥–µ–Ω!');
            setIsMarkerVisible(true);
          });

          marker.addEventListener('markerLost', () => {
            console.log('–ú–∞—Ä–∫–µ—Ä –ø–æ—Ç–µ—Ä—è–Ω');
            setIsMarkerVisible(false);
          });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
        const model = sceneRef.current.querySelector('a-gltf-model');
        if (model) {
          model.addEventListener('model-loaded', () => {
            console.log('3D –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
          });

          model.addEventListener('model-error', (e) => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:', e);
            setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ 3D –º–æ–¥–µ–ª–∏');
          });
        }
      }
    };

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ A-Frame
    if (typeof AFRAME !== 'undefined') {
      initAFrame();
    } else {
      const checkAFrame = setInterval(() => {
        if (typeof AFRAME !== 'undefined') {
          initAFrame();
          clearInterval(checkAFrame);
        }
      }, 100);

      return () => clearInterval(checkAFrame);
    }
  }, []);

  const handleBack = () => {
    navigate(-1);
  };

  const handleStartAR = () => {
    setShowInstructions(false);
    setArStarted(true);
  };

  const handleFullscreen = () => {
    if (sceneRef.current) {
      const canvas = sceneRef.current.querySelector('canvas');
      if (canvas && canvas.requestFullscreen) {
        canvas.requestFullscreen();
      }
    }
  };

  if (isLoading) {
    return (
      <div className="ar-loading">
        <div className="loading-spinner"></div>
        <h2>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AR...</h2>
        <p>–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É –∏ AR –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</p>
      </div>
    );
  }

  if (error || cameraPermission === false) {
    return (
      <div className="ar-error">
        <div className="error-icon">üìπ</div>
        <h2>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ</h2>
        <p>{error || '–î–ª—è —Ä–∞–±–æ—Ç—ã AR –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ'}</p>
        <div className="error-instructions">
          <h3>–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:</h3>
          <ul>
            <li>–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ</li>
            <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ HTTPS</li>
            <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞</li>
          </ul>
        </div>
        <button className="back-button" onClick={handleBack}>
          –ù–∞–∑–∞–¥
        </button>
      </div>
    );
  }

  return (
    <div className="ar-container">
      {/* AR –°—Ü–µ–Ω–∞ */}
      {arStarted && (
        <a-scene
          ref={sceneRef}
          className="ar-scene"
          embedded
          arjs="sourceType: webcam; debugUIEnabled: false; detectionMode: mono_and_matrix; matrixCodeType: 3x3; trackingMethod: best; sourceWidth:1280; sourceHeight:960; displayWidth: 1280; displayHeight: 960;"
          vr-mode-ui="enabled: false;"
          renderer="logarithmicDepthBuffer: true; colorManagement: true; sortObjects: true;"
          loading-screen="enabled: false;"
        >
          {/* –†–µ—Å—É—Ä—Å—ã */}
          <a-assets>
            <a-asset-item 
              id="anatomyModel" 
              src="/models/0198a3b0-fdfb-79fb-a9f4-17df3bb58923.glb"
              crossorigin="anonymous"
            />
          </a-assets>

          {/* –ú–∞—Ä–∫–µ—Ä Hiro */}
          <a-marker 
            preset="hiro"
            raycaster="objects: .clickable"
            emitevents="true"
            cursor="fuse: false; rayOrigin: mouse;"
          >
            {/* –û—Å–Ω–æ–≤–Ω–∞—è 3D –º–æ–¥–µ–ª—å */}
            <a-gltf-model
              src="#anatomyModel"
              position="0 0 0"
              scale="0.3 0.3 0.3"
              rotation="-90 0 0"
              animation__rotate="property: rotation; to: -90 360 0; loop: true; dur: 15000; easing: linear"
              animation__float="property: position; to: 0 0.2 0; dir: alternate; dur: 2000; loop: true; easing: easeInOutSine"
              class="clickable"
            />

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã */}
            <a-ring
              position="0 -0.1 0"
              radius-inner="0.3"
              radius-outer="0.5"
              color="#4ECDC4"
              opacity="0.3"
              animation="property: rotation; to: 0 360 0; loop: true; dur: 8000; easing: linear"
            />

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
            <a-plane
              position="0 1 0"
              width="2"
              height="0.5"
              color="#000000"
              opacity="0.7"
              text="value: –ê–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å; color: white; align: center; width: 6"
            />

            {/* –û—Å–≤–µ—â–µ–Ω–∏–µ */}
            <a-light type="ambient" color="#ffffff" intensity="0.6" />
            <a-light type="directional" position="1 1 1" intensity="0.8" color="#ffffff" />
            <a-light type="point" position="0 2 0" intensity="0.5" color="#4ECDC4" />
          </a-marker>

          {/* –ö–∞–º–µ—Ä–∞ */}
          <a-entity camera look-controls-enabled="false" arjs-look-controls="smoothingFactor: 0.1" />
        </a-scene>
      )}

      {/* UI Overlay */}
      <div className="ar-overlay">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="ar-header">
          <h1 className="ar-title">
            <span className="ar-icon">üî¨</span>
            AR –ê–Ω–∞—Ç–æ–º–∏—è
          </h1>
          <div className="ar-status">
            {isMarkerVisible ? (
              <span className="status-found">
                <span className="status-indicator active"></span>
                –ú–∞—Ä–∫–µ—Ä –Ω–∞–π–¥–µ–Ω
              </span>
            ) : (
              <span className="status-searching">
                <span className="status-indicator"></span>
                –ü–æ–∏—Å–∫ –º–∞—Ä–∫–µ—Ä–∞...
              </span>
            )}
          </div>
        </div>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        {!arStarted && showInstructions && (
          <div className="ar-instructions">
            <div className="instruction-card">
              <h3>üìç –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AR:</h3>
              <ol>
                <li>–ù–∞–∂–º–∏—Ç–µ "–ü–µ—Ä–µ–π—Ç–∏ –∫ AR" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä—ã</li>
                <li>–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ –º–∞—Ä–∫–µ—Ä Hiro</li>
                <li>–î–µ—Ä–∂–∏—Ç–µ –∫–∞–º–µ—Ä—É —Å—Ç–∞–±–∏–ª—å–Ω–æ</li>
                <li>–û–±–µ—Å–ø–µ—á—å—Ç–µ —Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ</li>
                <li>–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ—è–≤–ª–µ–Ω–∏—è 3D –º–æ–¥–µ–ª–∏</li>
              </ol>
              <div className="instruction-buttons">
                <a 
                  href="/images/hiro.png" 
                  target="_blank" 
                  className="marker-link"
                >
                  üì• –°–∫–∞—á–∞—Ç—å –º–∞—Ä–∫–µ—Ä Hiro
                </a>
                <button 
                  className="start-ar-button"
                  onClick={handleStartAR}
                >
                  üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ AR
                </button>
              </div>
            </div>
          </div>
        )}

        {/* AR –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ */}
        {arStarted && (
          <>
            <div className="ar-status">
              {isMarkerVisible ? (
                <span className="status-found">
                  <span className="status-indicator active"></span>
                  –ú–∞—Ä–∫–µ—Ä –Ω–∞–π–¥–µ–Ω
                </span>
              ) : (
                <span className="status-searching">
                  <span className="status-indicator"></span>
                  –ü–æ–∏—Å–∫ –º–∞—Ä–∫–µ—Ä–∞...
                </span>
              )}
            </div>

            {!isMarkerVisible && (
              <div className="ar-hint">
                <div className="hint-card">
                  <p>üì± –ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ –º–∞—Ä–∫–µ—Ä Hiro</p>
                </div>
              </div>
            )}
          </>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ */}
        {arStarted && isMarkerVisible && (
          <div className="model-info">
            <div className="info-card">
              <h3>üß¨ –ê–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å</h3>
              <p>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è 3D –º–æ–¥–µ–ª—å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–∞—Ç–æ–º–∏–∏</p>
              <div className="model-controls">
                <span className="control-hint">
                  üîÑ –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Ä–∞—â–∞–µ—Ç—Å—è
                </span>
              </div>
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="ar-controls">
          <button className="control-button back-btn" onClick={handleBack}>
            <span>‚Üê</span>
            <span>–ù–∞–∑–∞–¥</span>
          </button>
          
          <button className="control-button fullscreen-btn" onClick={handleFullscreen}>
            <span>‚õ∂</span>
            <span>–ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω</span>
          </button>
          
          {!arStarted && (
            <button className="control-button start-btn" onClick={handleStartAR}>
              <span>üöÄ</span>
              <span>–ó–∞–ø—É—Å—Ç–∏—Ç—å AR</span>
            </button>
          )}
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ */}
        <div className="loading-indicator">
          <div className="loading-bar"></div>
        </div>
      </div>
    </div>
  );
};

export default ARAnatomy;